//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nostralogia2._1.SMGeo {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SMGeo.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountriesList", ReplyAction="http://tempuri.org/IService/GetCountriesListResponse")]
        SMGeoDataContracts.CountryData[] GetCountriesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountriesList", ReplyAction="http://tempuri.org/IService/GetCountriesListResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CountryData[]> GetCountriesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCitiesCollection", ReplyAction="http://tempuri.org/IService/GetCitiesCollectionResponse")]
        SMGeoDataContracts.CityData[] GetCitiesCollection(int[] idCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCitiesCollection", ReplyAction="http://tempuri.org/IService/GetCitiesCollectionResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CityData[]> GetCitiesCollectionAsync(int[] idCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountriesCollection", ReplyAction="http://tempuri.org/IService/GetCountriesCollectionResponse")]
        SMGeoDataContracts.CountryData[] GetCountriesCollection(int[] idCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountriesCollection", ReplyAction="http://tempuri.org/IService/GetCountriesCollectionResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CountryData[]> GetCountriesCollectionAsync(int[] idCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEventGeoMap", ReplyAction="http://tempuri.org/IService/GetEventGeoMapResponse")]
        System.Collections.Generic.Dictionary<int, string[]> GetEventGeoMap(string[] strPlaceDataList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEventGeoMap", ReplyAction="http://tempuri.org/IService/GetEventGeoMapResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string[]>> GetEventGeoMapAsync(string[] strPlaceDataList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCityList", ReplyAction="http://tempuri.org/IService/getCityListResponse")]
        SMGeoDataContracts.CityData[] getCityList(int IDGeoCat, string GeoCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCityList", ReplyAction="http://tempuri.org/IService/getCityListResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CityData[]> getCityListAsync(int IDGeoCat, string GeoCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCityData", ReplyAction="http://tempuri.org/IService/getCityDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMGeoDataContracts.StateRegionDataQueryRez))]
        SMGeoDataContracts.CityData getCityData(int IDCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCityData", ReplyAction="http://tempuri.org/IService/getCityDataResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CityData> getCityDataAsync(int IDCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getStatesList", ReplyAction="http://tempuri.org/IService/getStatesListResponse")]
        SMGeoDataContracts.StateRegionData[] getStatesList(int IDCountry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getStatesList", ReplyAction="http://tempuri.org/IService/getStatesListResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionData[]> getStatesListAsync(int IDCountry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCity", ReplyAction="http://tempuri.org/IService/SaveCityResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMGeoDataContracts.StateRegionDataQueryRez))]
        int SaveCity(SMGeoDataContracts.CityData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCity", ReplyAction="http://tempuri.org/IService/SaveCityResponse")]
        System.Threading.Tasks.Task<int> SaveCityAsync(SMGeoDataContracts.CityData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCountry", ReplyAction="http://tempuri.org/IService/SaveCountryResponse")]
        int SaveCountry(SMGeoDataContracts.CountryData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCountry", ReplyAction="http://tempuri.org/IService/SaveCountryResponse")]
        System.Threading.Tasks.Task<int> SaveCountryAsync(SMGeoDataContracts.CountryData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveStateRegion", ReplyAction="http://tempuri.org/IService/SaveStateRegionResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMGeoDataContracts.StateRegionDataQueryRez))]
        int SaveStateRegion(SMGeoDataContracts.StateRegionData srd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveStateRegion", ReplyAction="http://tempuri.org/IService/SaveStateRegionResponse")]
        System.Threading.Tasks.Task<int> SaveStateRegionAsync(SMGeoDataContracts.StateRegionData srd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTimeZonesList", ReplyAction="http://tempuri.org/IService/GetTimeZonesListResponse")]
        SMGeoDataContracts.GEOTimeZoneInfo[] GetTimeZonesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTimeZonesList", ReplyAction="http://tempuri.org/IService/GetTimeZonesListResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.GEOTimeZoneInfo[]> GetTimeZonesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchCities", ReplyAction="http://tempuri.org/IService/SearchCitiesResponse")]
        SMGeoDataContracts.CityData[] SearchCities(SMGeoDataContracts.CityQueryData cqd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchCities", ReplyAction="http://tempuri.org/IService/SearchCitiesResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CityData[]> SearchCitiesAsync(SMGeoDataContracts.CityQueryData cqd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchStates", ReplyAction="http://tempuri.org/IService/SearchStatesResponse")]
        SMGeoDataContracts.StateRegionDataQueryRez[] SearchStates(SMGeoDataContracts.StateQueryData sqd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchStates", ReplyAction="http://tempuri.org/IService/SearchStatesResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionDataQueryRez[]> SearchStatesAsync(SMGeoDataContracts.StateQueryData sqd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCity", ReplyAction="http://tempuri.org/IService/DeleteCityResponse")]
        int DeleteCity(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCity", ReplyAction="http://tempuri.org/IService/DeleteCityResponse")]
        System.Threading.Tasks.Task<int> DeleteCityAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteState", ReplyAction="http://tempuri.org/IService/DeleteStateResponse")]
        int DeleteState(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteState", ReplyAction="http://tempuri.org/IService/DeleteStateResponse")]
        System.Threading.Tasks.Task<int> DeleteStateAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStateData", ReplyAction="http://tempuri.org/IService/GetStateDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMGeoDataContracts.StateRegionDataQueryRez))]
        SMGeoDataContracts.StateRegionData GetStateData(int IDState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStateData", ReplyAction="http://tempuri.org/IService/GetStateDataResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionData> GetStateDataAsync(int IDState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchEmptyStates", ReplyAction="http://tempuri.org/IService/SearchEmptyStatesResponse")]
        SMGeoDataContracts.StateRegionDataQueryRez[] SearchEmptyStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchEmptyStates", ReplyAction="http://tempuri.org/IService/SearchEmptyStatesResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionDataQueryRez[]> SearchEmptyStatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountryByState", ReplyAction="http://tempuri.org/IService/GetCountryByStateResponse")]
        SMGeoDataContracts.CountryData GetCountryByState(int IDState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountryByState", ReplyAction="http://tempuri.org/IService/GetCountryByStateResponse")]
        System.Threading.Tasks.Task<SMGeoDataContracts.CountryData> GetCountryByStateAsync(int IDState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Nostralogia2._1.SMGeo.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Nostralogia2._1.SMGeo.IService>, Nostralogia2._1.SMGeo.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SMGeoDataContracts.CountryData[] GetCountriesList() {
            return base.Channel.GetCountriesList();
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CountryData[]> GetCountriesListAsync() {
            return base.Channel.GetCountriesListAsync();
        }
        
        public SMGeoDataContracts.CityData[] GetCitiesCollection(int[] idCollection) {
            return base.Channel.GetCitiesCollection(idCollection);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CityData[]> GetCitiesCollectionAsync(int[] idCollection) {
            return base.Channel.GetCitiesCollectionAsync(idCollection);
        }
        
        public SMGeoDataContracts.CountryData[] GetCountriesCollection(int[] idCollection) {
            return base.Channel.GetCountriesCollection(idCollection);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CountryData[]> GetCountriesCollectionAsync(int[] idCollection) {
            return base.Channel.GetCountriesCollectionAsync(idCollection);
        }
        
        public System.Collections.Generic.Dictionary<int, string[]> GetEventGeoMap(string[] strPlaceDataList) {
            return base.Channel.GetEventGeoMap(strPlaceDataList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string[]>> GetEventGeoMapAsync(string[] strPlaceDataList) {
            return base.Channel.GetEventGeoMapAsync(strPlaceDataList);
        }
        
        public SMGeoDataContracts.CityData[] getCityList(int IDGeoCat, string GeoCategory) {
            return base.Channel.getCityList(IDGeoCat, GeoCategory);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CityData[]> getCityListAsync(int IDGeoCat, string GeoCategory) {
            return base.Channel.getCityListAsync(IDGeoCat, GeoCategory);
        }
        
        public SMGeoDataContracts.CityData getCityData(int IDCity) {
            return base.Channel.getCityData(IDCity);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CityData> getCityDataAsync(int IDCity) {
            return base.Channel.getCityDataAsync(IDCity);
        }
        
        public SMGeoDataContracts.StateRegionData[] getStatesList(int IDCountry) {
            return base.Channel.getStatesList(IDCountry);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionData[]> getStatesListAsync(int IDCountry) {
            return base.Channel.getStatesListAsync(IDCountry);
        }
        
        public int SaveCity(SMGeoDataContracts.CityData cd) {
            return base.Channel.SaveCity(cd);
        }
        
        public System.Threading.Tasks.Task<int> SaveCityAsync(SMGeoDataContracts.CityData cd) {
            return base.Channel.SaveCityAsync(cd);
        }
        
        public int SaveCountry(SMGeoDataContracts.CountryData cd) {
            return base.Channel.SaveCountry(cd);
        }
        
        public System.Threading.Tasks.Task<int> SaveCountryAsync(SMGeoDataContracts.CountryData cd) {
            return base.Channel.SaveCountryAsync(cd);
        }
        
        public int SaveStateRegion(SMGeoDataContracts.StateRegionData srd) {
            return base.Channel.SaveStateRegion(srd);
        }
        
        public System.Threading.Tasks.Task<int> SaveStateRegionAsync(SMGeoDataContracts.StateRegionData srd) {
            return base.Channel.SaveStateRegionAsync(srd);
        }
        
        public SMGeoDataContracts.GEOTimeZoneInfo[] GetTimeZonesList() {
            return base.Channel.GetTimeZonesList();
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.GEOTimeZoneInfo[]> GetTimeZonesListAsync() {
            return base.Channel.GetTimeZonesListAsync();
        }
        
        public SMGeoDataContracts.CityData[] SearchCities(SMGeoDataContracts.CityQueryData cqd) {
            return base.Channel.SearchCities(cqd);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CityData[]> SearchCitiesAsync(SMGeoDataContracts.CityQueryData cqd) {
            return base.Channel.SearchCitiesAsync(cqd);
        }
        
        public SMGeoDataContracts.StateRegionDataQueryRez[] SearchStates(SMGeoDataContracts.StateQueryData sqd) {
            return base.Channel.SearchStates(sqd);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionDataQueryRez[]> SearchStatesAsync(SMGeoDataContracts.StateQueryData sqd) {
            return base.Channel.SearchStatesAsync(sqd);
        }
        
        public int DeleteCity(int ID) {
            return base.Channel.DeleteCity(ID);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCityAsync(int ID) {
            return base.Channel.DeleteCityAsync(ID);
        }
        
        public int DeleteState(int ID) {
            return base.Channel.DeleteState(ID);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStateAsync(int ID) {
            return base.Channel.DeleteStateAsync(ID);
        }
        
        public SMGeoDataContracts.StateRegionData GetStateData(int IDState) {
            return base.Channel.GetStateData(IDState);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionData> GetStateDataAsync(int IDState) {
            return base.Channel.GetStateDataAsync(IDState);
        }
        
        public SMGeoDataContracts.StateRegionDataQueryRez[] SearchEmptyStates() {
            return base.Channel.SearchEmptyStates();
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.StateRegionDataQueryRez[]> SearchEmptyStatesAsync() {
            return base.Channel.SearchEmptyStatesAsync();
        }
        
        public SMGeoDataContracts.CountryData GetCountryByState(int IDState) {
            return base.Channel.GetCountryByState(IDState);
        }
        
        public System.Threading.Tasks.Task<SMGeoDataContracts.CountryData> GetCountryByStateAsync(int IDState) {
            return base.Channel.GetCountryByStateAsync(IDState);
        }
    }
}
