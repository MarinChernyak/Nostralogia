//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nostralogia2._1.SMAuthorization {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityData", Namespace="http://schemas.datacontract.org/2004/07/SMGeoDataContracts")]
    [System.SerializableAttribute()]
    public partial class CityData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Nostralogia2._1.SMAuthorization.CountryData CountryDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Nostralogia2._1.SMAuthorization.StateRegionData StateRegionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TimeDiffField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Nostralogia2._1.SMAuthorization.CountryData CountryData {
            get {
                return this.CountryDataField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryDataField, value) != true)) {
                    this.CountryDataField = value;
                    this.RaisePropertyChanged("CountryData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IDCity {
            get {
                return this.IDCityField;
            }
            set {
                if ((this.IDCityField.Equals(value) != true)) {
                    this.IDCityField = value;
                    this.RaisePropertyChanged("IDCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Nostralogia2._1.SMAuthorization.StateRegionData StateRegionData {
            get {
                return this.StateRegionDataField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRegionDataField, value) != true)) {
                    this.StateRegionDataField = value;
                    this.RaisePropertyChanged("StateRegionData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TimeDiff {
            get {
                return this.TimeDiffField;
            }
            set {
                if ((this.TimeDiffField.Equals(value) != true)) {
                    this.TimeDiffField = value;
                    this.RaisePropertyChanged("TimeDiff");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryData", Namespace="http://schemas.datacontract.org/2004/07/SMGeoDataContracts")]
    [System.SerializableAttribute()]
    public partial class CountryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryAcrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryAcr {
            get {
                return this.CountryAcrField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryAcrField, value) != true)) {
                    this.CountryAcrField = value;
                    this.RaisePropertyChanged("CountryAcr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryID {
            get {
                return this.CountryIDField;
            }
            set {
                if ((this.CountryIDField.Equals(value) != true)) {
                    this.CountryIDField = value;
                    this.RaisePropertyChanged("CountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StateRegionData", Namespace="http://schemas.datacontract.org/2004/07/SMGeoDataContracts")]
    [System.SerializableAttribute()]
    public partial class StateRegionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryRefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateRegionAcrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateRegionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateRegionNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryRef {
            get {
                return this.CountryRefField;
            }
            set {
                if ((this.CountryRefField.Equals(value) != true)) {
                    this.CountryRefField = value;
                    this.RaisePropertyChanged("CountryRef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateRegionAcr {
            get {
                return this.StateRegionAcrField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRegionAcrField, value) != true)) {
                    this.StateRegionAcrField = value;
                    this.RaisePropertyChanged("StateRegionAcr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateRegionID {
            get {
                return this.StateRegionIDField;
            }
            set {
                if ((this.StateRegionIDField.Equals(value) != true)) {
                    this.StateRegionIDField = value;
                    this.RaisePropertyChanged("StateRegionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateRegionName {
            get {
                return this.StateRegionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRegionNameField, value) != true)) {
                    this.StateRegionNameField = value;
                    this.RaisePropertyChanged("StateRegionName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SMAuthorization.ISMAuthorizationServ")]
    public interface ISMAuthorizationServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getAdmintWorkPermissionWithTempPass", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getAdmintWorkPermissionWithTempPassRespon" +
            "se")]
        string getAdmintWorkPermissionWithTempPass(string sUName, int AppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getAdmintWorkPermissionWithTempPass", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getAdmintWorkPermissionWithTempPassRespon" +
            "se")]
        System.Threading.Tasks.Task<string> getAdmintWorkPermissionWithTempPassAsync(string sUName, int AppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/DeleteUser", ReplyAction="http://tempuri.org/ISMAuthorizationServ/DeleteUserResponse")]
        SMDataContracts.ErrorContainer[] DeleteUser(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/DeleteUser", ReplyAction="http://tempuri.org/ISMAuthorizationServ/DeleteUserResponse")]
        System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> DeleteUserAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/DeleteUserSafe", ReplyAction="http://tempuri.org/ISMAuthorizationServ/DeleteUserSafeResponse")]
        SMDataContracts.ErrorContainer[] DeleteUserSafe(string UserName, string adminname, string sAdminPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/DeleteUserSafe", ReplyAction="http://tempuri.org/ISMAuthorizationServ/DeleteUserSafeResponse")]
        System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> DeleteUserSafeAsync(string UserName, string adminname, string sAdminPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CreateNewUser", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CreateNewUserResponse")]
        Nostralogia2._1.SMAuthorization.CreateNewUserResponse CreateNewUser(Nostralogia2._1.SMAuthorization.CreateNewUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CreateNewUser", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CreateNewUserResponse")]
        System.Threading.Tasks.Task<Nostralogia2._1.SMAuthorization.CreateNewUserResponse> CreateNewUserAsync(Nostralogia2._1.SMAuthorization.CreateNewUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CreateNewUserSecure", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CreateNewUserSecureResponse")]
        Nostralogia2._1.SMAuthorization.CreateNewUserSecureResponse CreateNewUserSecure(Nostralogia2._1.SMAuthorization.CreateNewUserSecureRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CreateNewUserSecure", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CreateNewUserSecureResponse")]
        System.Threading.Tasks.Task<Nostralogia2._1.SMAuthorization.CreateNewUserSecureResponse> CreateNewUserSecureAsync(Nostralogia2._1.SMAuthorization.CreateNewUserSecureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserDataByName", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserDataByNameResponse")]
        SMDataContracts.UserData getUserDataByName(string sUserName, int AppId, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserDataByName", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserDataByNameResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserData> getUserDataByNameAsync(string sUserName, int AppId, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserDataByEmail", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserDataByEmailResponse")]
        SMDataContracts.UserData getUserDataByEmail(string Email, int AppId, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserDataByEmail", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserDataByEmailResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserData> getUserDataByEmailAsync(string Email, int AppId, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserDataByID", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserDataByIDResponse")]
        SMDataContracts.UserData getUserDataByID(int UserID, int AppId, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserDataByID", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserDataByIDResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserData> getUserDataByIDAsync(int UserID, int AppId, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserRoleData", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserRoleDataResponse")]
        SMDataContracts.UserRole getUserRoleData(string sUserName, int AppID, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getUserRoleData", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getUserRoleDataResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserRole> getUserRoleDataAsync(string sUserName, int AppID, int iLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getAppRoles", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getAppRolesResponse")]
        SMDataContracts.UserRole[] getAppRoles(int AppID, int IDLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/getAppRoles", ReplyAction="http://tempuri.org/ISMAuthorizationServ/getAppRolesResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserRole[]> getAppRolesAsync(int AppID, int IDLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CheckPassword", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CheckPasswordResponse")]
        bool CheckPassword(int UserID, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CheckPassword", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CheckPasswordResponse")]
        System.Threading.Tasks.Task<bool> CheckPasswordAsync(int UserID, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/ResetPassword", ReplyAction="http://tempuri.org/ISMAuthorizationServ/ResetPasswordResponse")]
        SMDataContracts.ErrorContainer[] ResetPassword(string sUserName, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/ResetPassword", ReplyAction="http://tempuri.org/ISMAuthorizationServ/ResetPasswordResponse")]
        System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> ResetPasswordAsync(string sUserName, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/UpdateUsersRole", ReplyAction="http://tempuri.org/ISMAuthorizationServ/UpdateUsersRoleResponse")]
        SMDataContracts.ErrorContainer[] UpdateUsersRole(string UserName, int AppID, int RoleID, string adminname, string sAdminPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/UpdateUsersRole", ReplyAction="http://tempuri.org/ISMAuthorizationServ/UpdateUsersRoleResponse")]
        System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> UpdateUsersRoleAsync(string UserName, int AppID, int RoleID, string adminname, string sAdminPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/UpdateUserData", ReplyAction="http://tempuri.org/ISMAuthorizationServ/UpdateUserDataResponse")]
        SMDataContracts.ErrorContainer[] UpdateUserData(SMDataContracts.UserData ud);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/UpdateUserData", ReplyAction="http://tempuri.org/ISMAuthorizationServ/UpdateUserDataResponse")]
        System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> UpdateUserDataAsync(SMDataContracts.UserData ud);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/LogIn", ReplyAction="http://tempuri.org/ISMAuthorizationServ/LogInResponse")]
        SMDataContracts.UserData LogIn(string sUserName, string sPassword, int AppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/LogIn", ReplyAction="http://tempuri.org/ISMAuthorizationServ/LogInResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserData> LogInAsync(string sUserName, string sPassword, int AppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/LogInSecure", ReplyAction="http://tempuri.org/ISMAuthorizationServ/LogInSecureResponse")]
        SMDataContracts.UserData LogInSecure(int AppID, string SessionKey, string encUserName, string encPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/LogInSecure", ReplyAction="http://tempuri.org/ISMAuthorizationServ/LogInSecureResponse")]
        System.Threading.Tasks.Task<SMDataContracts.UserData> LogInSecureAsync(int AppID, string SessionKey, string encUserName, string encPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CheckUniqueness", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CheckUniquenessResponse")]
        int CheckUniqueness(string UserName, string Email, int AppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMAuthorizationServ/CheckUniqueness", ReplyAction="http://tempuri.org/ISMAuthorizationServ/CheckUniquenessResponse")]
        System.Threading.Tasks.Task<int> CheckUniquenessAsync(string UserName, string Email, int AppID);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateNewUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SMDataContracts.UserData ud;
        
        public CreateNewUserRequest() {
        }
        
        public CreateNewUserRequest(SMDataContracts.UserData ud) {
            this.ud = ud;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateNewUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SMDataContracts.ErrorContainer[] CreateNewUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int UID;
        
        public CreateNewUserResponse() {
        }
        
        public CreateNewUserResponse(SMDataContracts.ErrorContainer[] CreateNewUserResult, int UID) {
            this.CreateNewUserResult = CreateNewUserResult;
            this.UID = UID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewUserSecure", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateNewUserSecureRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SMDataContracts.UserData ud;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string adminname;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string sAdminPass;
        
        public CreateNewUserSecureRequest() {
        }
        
        public CreateNewUserSecureRequest(SMDataContracts.UserData ud, string adminname, string sAdminPass) {
            this.ud = ud;
            this.adminname = adminname;
            this.sAdminPass = sAdminPass;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewUserSecureResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateNewUserSecureResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SMDataContracts.ErrorContainer[] CreateNewUserSecureResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int UID;
        
        public CreateNewUserSecureResponse() {
        }
        
        public CreateNewUserSecureResponse(SMDataContracts.ErrorContainer[] CreateNewUserSecureResult, int UID) {
            this.CreateNewUserSecureResult = CreateNewUserSecureResult;
            this.UID = UID;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISMAuthorizationServChannel : Nostralogia2._1.SMAuthorization.ISMAuthorizationServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SMAuthorizationServClient : System.ServiceModel.ClientBase<Nostralogia2._1.SMAuthorization.ISMAuthorizationServ>, Nostralogia2._1.SMAuthorization.ISMAuthorizationServ {
        
        public SMAuthorizationServClient() {
        }
        
        public SMAuthorizationServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SMAuthorizationServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SMAuthorizationServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SMAuthorizationServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getAdmintWorkPermissionWithTempPass(string sUName, int AppID) {
            return base.Channel.getAdmintWorkPermissionWithTempPass(sUName, AppID);
        }
        
        public System.Threading.Tasks.Task<string> getAdmintWorkPermissionWithTempPassAsync(string sUName, int AppID) {
            return base.Channel.getAdmintWorkPermissionWithTempPassAsync(sUName, AppID);
        }
        
        public SMDataContracts.ErrorContainer[] DeleteUser(string UserName) {
            return base.Channel.DeleteUser(UserName);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> DeleteUserAsync(string UserName) {
            return base.Channel.DeleteUserAsync(UserName);
        }
        
        public SMDataContracts.ErrorContainer[] DeleteUserSafe(string UserName, string adminname, string sAdminPass) {
            return base.Channel.DeleteUserSafe(UserName, adminname, sAdminPass);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> DeleteUserSafeAsync(string UserName, string adminname, string sAdminPass) {
            return base.Channel.DeleteUserSafeAsync(UserName, adminname, sAdminPass);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nostralogia2._1.SMAuthorization.CreateNewUserResponse Nostralogia2._1.SMAuthorization.ISMAuthorizationServ.CreateNewUser(Nostralogia2._1.SMAuthorization.CreateNewUserRequest request) {
            return base.Channel.CreateNewUser(request);
        }
        
        public SMDataContracts.ErrorContainer[] CreateNewUser(SMDataContracts.UserData ud, out int UID) {
            Nostralogia2._1.SMAuthorization.CreateNewUserRequest inValue = new Nostralogia2._1.SMAuthorization.CreateNewUserRequest();
            inValue.ud = ud;
            Nostralogia2._1.SMAuthorization.CreateNewUserResponse retVal = ((Nostralogia2._1.SMAuthorization.ISMAuthorizationServ)(this)).CreateNewUser(inValue);
            UID = retVal.UID;
            return retVal.CreateNewUserResult;
        }
        
        public System.Threading.Tasks.Task<Nostralogia2._1.SMAuthorization.CreateNewUserResponse> CreateNewUserAsync(Nostralogia2._1.SMAuthorization.CreateNewUserRequest request) {
            return base.Channel.CreateNewUserAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nostralogia2._1.SMAuthorization.CreateNewUserSecureResponse Nostralogia2._1.SMAuthorization.ISMAuthorizationServ.CreateNewUserSecure(Nostralogia2._1.SMAuthorization.CreateNewUserSecureRequest request) {
            return base.Channel.CreateNewUserSecure(request);
        }
        
        public SMDataContracts.ErrorContainer[] CreateNewUserSecure(SMDataContracts.UserData ud, string adminname, string sAdminPass, out int UID) {
            Nostralogia2._1.SMAuthorization.CreateNewUserSecureRequest inValue = new Nostralogia2._1.SMAuthorization.CreateNewUserSecureRequest();
            inValue.ud = ud;
            inValue.adminname = adminname;
            inValue.sAdminPass = sAdminPass;
            Nostralogia2._1.SMAuthorization.CreateNewUserSecureResponse retVal = ((Nostralogia2._1.SMAuthorization.ISMAuthorizationServ)(this)).CreateNewUserSecure(inValue);
            UID = retVal.UID;
            return retVal.CreateNewUserSecureResult;
        }
        
        public System.Threading.Tasks.Task<Nostralogia2._1.SMAuthorization.CreateNewUserSecureResponse> CreateNewUserSecureAsync(Nostralogia2._1.SMAuthorization.CreateNewUserSecureRequest request) {
            return base.Channel.CreateNewUserSecureAsync(request);
        }
        
        public SMDataContracts.UserData getUserDataByName(string sUserName, int AppId, int iLang) {
            return base.Channel.getUserDataByName(sUserName, AppId, iLang);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserData> getUserDataByNameAsync(string sUserName, int AppId, int iLang) {
            return base.Channel.getUserDataByNameAsync(sUserName, AppId, iLang);
        }
        
        public SMDataContracts.UserData getUserDataByEmail(string Email, int AppId, int iLang) {
            return base.Channel.getUserDataByEmail(Email, AppId, iLang);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserData> getUserDataByEmailAsync(string Email, int AppId, int iLang) {
            return base.Channel.getUserDataByEmailAsync(Email, AppId, iLang);
        }
        
        public SMDataContracts.UserData getUserDataByID(int UserID, int AppId, int iLang) {
            return base.Channel.getUserDataByID(UserID, AppId, iLang);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserData> getUserDataByIDAsync(int UserID, int AppId, int iLang) {
            return base.Channel.getUserDataByIDAsync(UserID, AppId, iLang);
        }
        
        public SMDataContracts.UserRole getUserRoleData(string sUserName, int AppID, int iLang) {
            return base.Channel.getUserRoleData(sUserName, AppID, iLang);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserRole> getUserRoleDataAsync(string sUserName, int AppID, int iLang) {
            return base.Channel.getUserRoleDataAsync(sUserName, AppID, iLang);
        }
        
        public SMDataContracts.UserRole[] getAppRoles(int AppID, int IDLang) {
            return base.Channel.getAppRoles(AppID, IDLang);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserRole[]> getAppRolesAsync(int AppID, int IDLang) {
            return base.Channel.getAppRolesAsync(AppID, IDLang);
        }
        
        public bool CheckPassword(int UserID, string Pass) {
            return base.Channel.CheckPassword(UserID, Pass);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPasswordAsync(int UserID, string Pass) {
            return base.Channel.CheckPasswordAsync(UserID, Pass);
        }
        
        public SMDataContracts.ErrorContainer[] ResetPassword(string sUserName, string NewPassword) {
            return base.Channel.ResetPassword(sUserName, NewPassword);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> ResetPasswordAsync(string sUserName, string NewPassword) {
            return base.Channel.ResetPasswordAsync(sUserName, NewPassword);
        }
        
        public SMDataContracts.ErrorContainer[] UpdateUsersRole(string UserName, int AppID, int RoleID, string adminname, string sAdminPass) {
            return base.Channel.UpdateUsersRole(UserName, AppID, RoleID, adminname, sAdminPass);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> UpdateUsersRoleAsync(string UserName, int AppID, int RoleID, string adminname, string sAdminPass) {
            return base.Channel.UpdateUsersRoleAsync(UserName, AppID, RoleID, adminname, sAdminPass);
        }
        
        public SMDataContracts.ErrorContainer[] UpdateUserData(SMDataContracts.UserData ud) {
            return base.Channel.UpdateUserData(ud);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.ErrorContainer[]> UpdateUserDataAsync(SMDataContracts.UserData ud) {
            return base.Channel.UpdateUserDataAsync(ud);
        }
        
        public SMDataContracts.UserData LogIn(string sUserName, string sPassword, int AppID) {
            return base.Channel.LogIn(sUserName, sPassword, AppID);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserData> LogInAsync(string sUserName, string sPassword, int AppID) {
            return base.Channel.LogInAsync(sUserName, sPassword, AppID);
        }
        
        public SMDataContracts.UserData LogInSecure(int AppID, string SessionKey, string encUserName, string encPassword) {
            return base.Channel.LogInSecure(AppID, SessionKey, encUserName, encPassword);
        }
        
        public System.Threading.Tasks.Task<SMDataContracts.UserData> LogInSecureAsync(int AppID, string SessionKey, string encUserName, string encPassword) {
            return base.Channel.LogInSecureAsync(AppID, SessionKey, encUserName, encPassword);
        }
        
        public int CheckUniqueness(string UserName, string Email, int AppID) {
            return base.Channel.CheckUniqueness(UserName, Email, AppID);
        }
        
        public System.Threading.Tasks.Task<int> CheckUniquenessAsync(string UserName, string Email, int AppID) {
            return base.Channel.CheckUniquenessAsync(UserName, Email, AppID);
        }
    }
}
